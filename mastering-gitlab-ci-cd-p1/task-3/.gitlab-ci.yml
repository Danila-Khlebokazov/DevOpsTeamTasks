stages:
  - deploy
  - monitoring
  - emergent


before_script:
  - 'command -v ssh-agent >/dev/null || ( apk add --update openssh )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan $VM_IPADDRESS >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

deploy:
  stage: deploy
  script:
    - ssh $SSH_USER@$VM_IPADDRESS  <<EOF
    - sudo rm -rf app
    - git clone $CI_REPOSITORY_URL app
    - cd app
    - sudo apt-get update
    - sudo apt-get install python3 python3-pip virtualenv -y
    - virtualenv venv
    - source venv/bin/activate
    - python3 -m pip install -r requirements.txt
    - sudo cp ./test.service /etc/systemd/system/test.service
    - sudo systemctl daemon-reload
    - sudo systemctl start test
    - EOF
  after_script:
    - "curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage -d chat_id=\"$TELEGRAM_CHAT_ID\" -d text=\"Deploy! CI/CD pipeline has been completed for $CI_COMMIT_REF_NAME branch. Status: $CI_JOB_STATUS\""
  only:
    - main
    - /^release-.*$/
  environment:
    name: production
    url: http://$VM_IPADDRESS:8000
  allow_failure: false
  when:
    manual


monitoring:
  stage: monitoring
  dependencies:
    - deploy
  script: |
    echo "Started monitoring"
    echo "Waiting 1 minute for the server to start"
    sleep 60
    for i in $(seq 5 $END); do
      status_code=$(curl -s -o /dev/null -w "%{http_code}" http://$VM_IPADDRESS:8000/health-check/);
      if [ $status_code -ne 200 ]; then
        echo "Failed to connect to the server. Status code: $status_code"
        exit 1
      fi
      echo "Success ping"
      sleep 1;
    done
  after_script: |
    if [ "$CI_JOB_STATUS" == "failed" ]; then
      curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage -d chat_id="$TELEGRAM_CHAT_ID" -d text="Test! CI/CD pipeline has been failed for $CI_COMMIT_REF_NAME branch. Status: $CI_JOB_STATUS"
    fi
  allow_failure: false
  when: on_success

recovery:
  stage: emergent
  dependencies:
    - monitoring
  script:
    - echo "Starting recovery"
    - ssh $SSH_USER@$VM_IPADDRESS <<EOF
    - sudo systemctl daemon-reload
    - sudo systemctl start test
  allow_failure: false
  when: on_failure
